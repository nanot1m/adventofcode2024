{"mappings":"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","sources":["<anon>","../js/modules/parser.js","src/day14/index.js","../js/solutions/14.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"kxxN7\", function(module, exports) {\n\n$parcel$export(module.exports, \"t\", () => $ef4119ef3a0ad5e7$export$625550452a3fa3ec);\n// @ts-check\n\nvar $3Ru88 = parcelRequire(\"3Ru88\");\n/**\n * @param {string} strVal\n */ function $ef4119ef3a0ad5e7$var$tryGetSeparator(strVal) {\n    const separators = [\n        \"\\n\\n\",\n        \"\\n\",\n        \" -> \",\n        \", \",\n        \",\",\n        \" - \",\n        \" \",\n        \"-\"\n    ];\n    for (const separator of separators){\n        if (strVal.includes(separator)) return separator;\n    }\n    return null;\n}\n/**\n * @template T\n *\n * @typedef {Object} ParserRegistryItem\n * @property {(input: string) => boolean} check\n * @property {(input: string, key?: string) => T} parse\n *\n */ /**\n * @template {ParserRegistryItem<unknown>} T\n *\n * @typedef {T & {withSeparator: (separator: string) => T}} WithSeparator\n */ /**\n * @template {Record<string, ParserRegistryItem<unknown>>} T\n *\n * @param {T} parsers\n * @returns {T}\n */ function $ef4119ef3a0ad5e7$var$registerParsers(parsers) {\n    return parsers;\n}\nconst $ef4119ef3a0ad5e7$var$PARSERS = $ef4119ef3a0ad5e7$var$registerParsers({\n    int: /** @type {const} */ {\n        name: \"int\",\n        check: (key)=>key === \"int\",\n        parse: (strVal)=>parseInt(strVal, 10)\n    },\n    str: /** @type {const} */ {\n        name: \"str\",\n        check: (key)=>key === \"str\",\n        parse: (strVal)=>strVal\n    },\n    vec: /** @type {const} */ {\n        name: \"vec\",\n        check: (key)=>key === \"vec\",\n        parse: (strVal)=>{\n            const separator = $ef4119ef3a0ad5e7$var$tryGetSeparator(strVal);\n            if (!separator) throw new Error(`Invalid vec: ${strVal}`);\n            const [x, y] = strVal.split(separator).map(Number);\n            return (0, $3Ru88.V).vec(x, y);\n        }\n    },\n    vec3: /** @type {const} */ {\n        name: \"vec3\",\n        check: (key)=>key === \"vec3\",\n        parse: (strVal)=>{\n            const separator = $ef4119ef3a0ad5e7$var$tryGetSeparator(strVal);\n            if (!separator) throw new Error(`Invalid vec3: ${strVal}`);\n            const [x, y, z] = strVal.split(separator).map(Number);\n            return (0, $3Ru88.V3).vec3(x, y, z);\n        }\n    },\n    arr: /** @type {const} */ {\n        name: \"arr\",\n        check: (key)=>key.endsWith(\"[]\"),\n        parse: (strVal, key = \"\")=>{\n            const type = key.slice(0, -2);\n            const parser = $ef4119ef3a0ad5e7$var$getParserByType(type);\n            if (!parser) throw new Error(`Invalid array type \"${type}\" in \"${key}\"`);\n            const separator = $ef4119ef3a0ad5e7$var$tryGetSeparator(strVal) ?? \",\";\n            return strVal.split(separator).filter((x)=>x !== \"\").map((x)=>parser.parse(x.trim(), type));\n        }\n    },\n    tuple: /** @type {const} */ {\n        name: \"tuple\",\n        check: (key)=>key.startsWith(\"(\") && key.endsWith(\")\"),\n        parse: (strVal, key = \"\")=>{\n            const types = key.slice(1, -1).split(\",\");\n            const separator = $ef4119ef3a0ad5e7$var$tryGetSeparator(strVal) ?? \",\";\n            return strVal.split(separator).map((x, i)=>{\n                const parser = $ef4119ef3a0ad5e7$var$getParserByType(types[i]);\n                if (!parser) throw new Error(`Invalid tuple type \"${types[i]}\" in \"${key}\"`);\n                return parser.parse(x, types[i]);\n            });\n        }\n    }\n});\n/**\n * @param {string} type\n * @returns {ParserRegistryItem<unknown> | null}\n */ function $ef4119ef3a0ad5e7$var$getParserByType(type) {\n    for(const key in $ef4119ef3a0ad5e7$var$PARSERS){\n        if ($ef4119ef3a0ad5e7$var$PARSERS[/** @type {keyof typeof PARSERS} */ key].check(type)) return $ef4119ef3a0ad5e7$var$PARSERS[/** @type {keyof typeof PARSERS} */ key];\n    }\n    return null;\n}\n/**\n * @template T\n *\n * @param {string} strVal\n * @param {string} type\n * @returns {T}\n */ function $ef4119ef3a0ad5e7$var$parse(strVal, type) {\n    const parser = $ef4119ef3a0ad5e7$var$getParserByType(type);\n    if (!parser) throw new Error(`Invalid type \"${type}\"`);\n    return /** @type {T} */ parser.parse(strVal, type);\n}\n/**\n * @template T\n *\n * @typedef {Object} Parser\n * @property {(strVal: string) => T} parse\n */ const $ef4119ef3a0ad5e7$var$commonTypes = {\n    int: ()=>$ef4119ef3a0ad5e7$var$mappableParser($ef4119ef3a0ad5e7$var$PARSERS.int),\n    str: ()=>$ef4119ef3a0ad5e7$var$mappableParser($ef4119ef3a0ad5e7$var$PARSERS.str),\n    vec: ()=>$ef4119ef3a0ad5e7$var$mappableParser($ef4119ef3a0ad5e7$var$PARSERS.vec),\n    vec3: ()=>$ef4119ef3a0ad5e7$var$mappableParser($ef4119ef3a0ad5e7$var$PARSERS.vec3),\n    /**\n\t * @template T\n\t *\n\t * @param {Parser<T>} type\n\t * @param {string | RegExp} [separator]\n\t */ arr: (type, separator)=>$ef4119ef3a0ad5e7$var$mappableParser({\n            parse: (strVal)=>{\n                return strVal.split(separator ?? $ef4119ef3a0ad5e7$var$tryGetSeparator(strVal) ?? \",\").map((x)=>x.trim()).filter((x)=>x !== \"\").map((x)=>type.parse(x));\n            }\n        }),\n    /**\n\t * @template {Parser<unknown>[]} T\n\t *\n\t * @param {import(\"ts-toolbelt\").F.Narrow<T>} types\n\t * @param {string} [separator]\n\t */ tuple: (types, separator)=>$ef4119ef3a0ad5e7$var$mappableParser({\n            /**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {{[K in keyof T]: T[K] extends Parser<infer U> ? U : never}}\n\t\t\t */ parse: (strVal)=>{\n                // @ts-ignore\n                return strVal.split(separator ?? $ef4119ef3a0ad5e7$var$tryGetSeparator(strVal) ?? \",\").map((x, i)=>types[i].parse(x));\n            }\n        }),\n    /**\n\t * @template {readonly string[]} T\n\t *\n\t * @param {T} values\n\t */ enum: (...values)=>$ef4119ef3a0ad5e7$var$mappableParser({\n            /**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {T[number]}\n\t\t\t */ parse: (strVal)=>{\n                // @ts-ignore\n                if (!values.includes(strVal)) throw new Error(`Invalid enum value \"${strVal}\"`);\n                return strVal;\n            }\n        })\n};\n/**\n * @template T\n * @param {Parser<T>} parser\n */ function $ef4119ef3a0ad5e7$var$mappableParser(parser) {\n    return {\n        ...parser,\n        /**\n\t\t * @template U\n\t\t * @param {(val: T) => U} fn\n\t\t */ map: (fn)=>$ef4119ef3a0ad5e7$var$mappableParser({\n                ...parser,\n                parse: (x)=>fn(parser.parse(x))\n            })\n    };\n}\n/**\n * @template {(string)[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param {T} keys\n */ function $ef4119ef3a0ad5e7$var$tpl(strings, ...keys) {\n    /**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as import(\"./types.js\").TemplateKey<P>]: import(\"./types.js\").TemplateValue<P> }}\n\t */ function parseInternal(input) {\n        /** @type {Record<string, any>} */ const model = {};\n        let lastIndex = 0;\n        for(let i = 0; i < keys.length; i++){\n            const start = strings[i].length + lastIndex;\n            const end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length;\n            const strVal = input.slice(start, end);\n            const [key, type] = keys[i].split(\"|\");\n            model[key] = $ef4119ef3a0ad5e7$var$parse(strVal, type);\n            lastIndex = end;\n        }\n        return /** @type {any} */ model;\n    }\n    return $ef4119ef3a0ad5e7$var$mappableParser({\n        parse: parseInternal\n    });\n}\n/**\n * @template {string} K\n * @template T\n *\n * @param {K} name\n * @param {Parser<T>} parser\n * @returns {NamedParser<K, T>}\n */ function $ef4119ef3a0ad5e7$var$named(name, parser) {\n    return {\n        ...parser,\n        name: name\n    };\n}\n/**\n * @template {string} K\n * @template T\n *\n * @typedef {object} NamedParser\n *\n * @property {(strVal: string) => T} parse\n * @property {K} name\n */ /**\n * @template {NamedParser<any, any>[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param  {T} keys\n */ function $ef4119ef3a0ad5e7$var$tpl2(strings, ...keys) {\n    /**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as P['name']]: ReturnType<P['parse']> }}\n\t */ function parseInternal(input) {\n        /** @type {Record<string, any>} */ const model = {};\n        let lastIndex = 0;\n        for(let i = 0; i < keys.length; i++){\n            const start = strings[i].length + lastIndex;\n            const end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length;\n            const strVal = input.slice(start, end);\n            const namedParser = keys[i];\n            model[namedParser.name] = namedParser.parse(strVal);\n            lastIndex = end;\n        }\n        return /** @type {any} */ model;\n    }\n    return $ef4119ef3a0ad5e7$var$mappableParser({\n        parse: parseInternal\n    });\n}\nconst $ef4119ef3a0ad5e7$export$625550452a3fa3ec = {\n    ...$ef4119ef3a0ad5e7$var$commonTypes,\n    named: $ef4119ef3a0ad5e7$var$named,\n    tpl: $ef4119ef3a0ad5e7$var$tpl,\n    tpl2: $ef4119ef3a0ad5e7$var$tpl2\n};\n\n});\n\n// @ts-check\nparcelRequire(\"bICZs\");\n// @ts-check\n\nvar $3Ru88 = parcelRequire(\"3Ru88\");\n\nvar $jAXUN = parcelRequire(\"jAXUN\");\n\nvar $kxxN7 = parcelRequire(\"kxxN7\");\nconst $bed1b6c72a580a04$export$c2ab8e3711492050 = false;\nconst $bed1b6c72a580a04$export$a92a7d01225c1610 = `\\\np=0,4 v=3,-3\np=6,3 v=-1,-3\np=10,3 v=-1,2\np=2,0 v=2,-1\np=0,0 v=1,3\np=3,0 v=-2,-2\np=7,6 v=-1,-3\np=3,0 v=-1,-2\np=9,3 v=2,3\np=7,3 v=-1,2\np=2,4 v=2,-3\np=9,5 v=-3,-3`;\nconst $bed1b6c72a580a04$var$width = 101;\nconst $bed1b6c72a580a04$var$height = 103;\n/** @typedef {ReturnType<typeof parseInput>} InputType */ const $bed1b6c72a580a04$var$lineParser = (0, $kxxN7.t).tpl`p=${\"pos|vec\"} v=${\"vel|vec\"}`;\nconst $bed1b6c72a580a04$export$20bebb8aee8dd3f5 = (0, $kxxN7.t).arr($bed1b6c72a580a04$var$lineParser).parse;\nfunction $bed1b6c72a580a04$export$42bfa9b2d4dad91a(pos, vel, t) {\n    const target = (0, $3Ru88.V).add(pos, (0, $3Ru88.V).scale(vel, t));\n    return (0, $3Ru88.V).vec((0, $3Ru88.Lib).mod(target[0], $bed1b6c72a580a04$var$width), (0, $3Ru88.Lib).mod(target[1], $bed1b6c72a580a04$var$height));\n}\n/**\n * @param {V.Vec2[]} positions\n */ function $bed1b6c72a580a04$var$print(positions) {\n    const arr = Array.from({\n        length: $bed1b6c72a580a04$var$height\n    }, ()=>Array($bed1b6c72a580a04$var$width).fill(\".\"));\n    for (const pos of positions)(0, $3Ru88.Array2d).set(arr, pos, \"#\");\n    return arr.map((line)=>line.join(\"\")).join(\"\\n\");\n}\nfunction $bed1b6c72a580a04$export$6e3fa38cfddb4746(input) {\n    const width = 101;\n    const height = 103;\n    const cx = (width - 1) / 2;\n    const cy = (height - 1) / 2;\n    return input.values().map((r)=>$bed1b6c72a580a04$export$42bfa9b2d4dad91a(r.pos, r.vel, 100)).filter((p)=>(0, $3Ru88.V).x(p) !== cx && (0, $3Ru88.V).y(p) !== cy).groupBy((pos)=>{\n        if ((0, $3Ru88.V).x(pos) < cx && (0, $3Ru88.V).y(pos) < cy) return 1;\n        if ((0, $3Ru88.V).x(pos) > cx && (0, $3Ru88.V).y(pos) < cy) return 2;\n        if ((0, $3Ru88.V).x(pos) < cx && (0, $3Ru88.V).y(pos) > cy) return 3;\n        return 4;\n    }).values().map((x)=>x.length).multiply();\n}\nfunction $bed1b6c72a580a04$export$5265e25950dfc039(robots, pattern) {\n    return $bed1b6c72a580a04$var$print(robots.map((r)=>r.pos)).includes(pattern);\n}\nfunction $bed1b6c72a580a04$export$48cfd1e771a65c4f(r) {\n    return r.map(({ pos: pos, vel: vel })=>({\n            pos: $bed1b6c72a580a04$export$42bfa9b2d4dad91a(pos, vel, 1),\n            vel: vel\n        }));\n}\nconst $bed1b6c72a580a04$export$24f82734ea047e6f = \"#\".repeat(10);\nfunction $bed1b6c72a580a04$export$9fb73bf15c9f3bcd(input) {\n    return (0, $jAXUN.iterate)(input, $bed1b6c72a580a04$export$48cfd1e771a65c4f).map((r)=>r.map(({ pos: pos })=>pos)).map((r)=>$bed1b6c72a580a04$var$print(r)).takeUntil((str)=>str.includes($bed1b6c72a580a04$export$24f82734ea047e6f)).count();\n}\n\n\nparcelRequire(\"3Ru88\");\n\nvar $7zFg5 = parcelRequire(\"7zFg5\");\nconst $8a82902540089ab9$var$canvas = document.getElementById(\"canvas\");\nif (!($8a82902540089ab9$var$canvas instanceof HTMLCanvasElement)) throw new Error(\"no canvas\");\nconst $8a82902540089ab9$var$ctx = $8a82902540089ab9$var$canvas.getContext(\"2d\");\nif (!$8a82902540089ab9$var$ctx) throw new Error(\"no ctx\");\nconst $8a82902540089ab9$var$width = 101;\nconst $8a82902540089ab9$var$height = 103;\nconst $8a82902540089ab9$var$scale = 3 // Math.min(10, Math.max(2, 200 / width))\n;\nconst $8a82902540089ab9$var$cols = 1;\n(0, $7zFg5.scaleCanvasToPixelRatio)($8a82902540089ab9$var$ctx, $8a82902540089ab9$var$cols * $8a82902540089ab9$var$width * $8a82902540089ab9$var$scale, $8a82902540089ab9$var$height * $8a82902540089ab9$var$scale);\nlet $8a82902540089ab9$var$raf = 0;\nlet $8a82902540089ab9$var$unsubscribe = ()=>{};\n/**\n * @param {string} input\n * @param {CanvasRenderingContext2D} ctx\n */ function $8a82902540089ab9$var$draw(input, ctx) {\n    cancelAnimationFrame($8a82902540089ab9$var$raf);\n    $8a82902540089ab9$var$unsubscribe();\n    const robots = (0, $bed1b6c72a580a04$export$20bebb8aee8dd3f5)(input);\n    (0, $7zFg5.scaleCanvasToPixelRatio)(ctx, $8a82902540089ab9$var$width * $8a82902540089ab9$var$scale, $8a82902540089ab9$var$height * $8a82902540089ab9$var$scale);\n    ctx.canvas.scrollIntoView({\n        behavior: \"smooth\"\n    });\n    const drawRobots = (/** @type {{ pos: V.Vec2; vel: V.Vec2; }[]} */ robots)=>{\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.fillStyle = \"white\";\n        ctx.fillRect(0, 0, $8a82902540089ab9$var$width * $8a82902540089ab9$var$scale, $8a82902540089ab9$var$height * $8a82902540089ab9$var$scale);\n        for (const robot of robots){\n            ctx.fillStyle = \"#becfaa\";\n            ctx.beginPath();\n            ctx.arc(robot.pos[0] * $8a82902540089ab9$var$scale, robot.pos[1] * $8a82902540089ab9$var$scale, $8a82902540089ab9$var$scale / 2, 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fill();\n        }\n    };\n    const timeInput = document.getElementById(\"time\");\n    const timeOutput = document.getElementById(\"time-output\");\n    if (!(timeInput instanceof HTMLInputElement)) throw new Error(\"no input\");\n    if (!(timeOutput instanceof HTMLSpanElement)) throw new Error(\"no output\");\n    let time = 0;\n    const refreshRobotDisplay = function() {\n        const t = parseInt(this.value);\n        if (isNaN(t)) return;\n        time = t;\n        const newRobots = robots.map((robot)=>({\n                pos: (0, $bed1b6c72a580a04$export$42bfa9b2d4dad91a)(robot.pos, robot.vel, t),\n                vel: robot.vel\n            }));\n        drawRobots(newRobots);\n        const timeStr = t.toString();\n        timeOutput.textContent = timeStr;\n    };\n    timeInput.disabled = false;\n    timeInput.addEventListener(\"input\", refreshRobotDisplay);\n    $8a82902540089ab9$var$unsubscribe = ()=>timeInput.removeEventListener(\"input\", refreshRobotDisplay);\n    $8a82902540089ab9$var$raf = requestAnimationFrame(function render() {\n        let newRobots = robots;\n        for(let i = 0; i < 10; i++){\n            time++;\n            newRobots = robots.map((robot)=>({\n                    pos: (0, $bed1b6c72a580a04$export$42bfa9b2d4dad91a)(robot.pos, robot.vel, time),\n                    vel: robot.vel\n                }));\n            const timeStr = time.toString();\n            timeOutput.textContent = timeStr;\n            timeInput.value = timeStr;\n            if ((0, $bed1b6c72a580a04$export$5265e25950dfc039)(newRobots, (0, $bed1b6c72a580a04$export$24f82734ea047e6f))) {\n                drawRobots(newRobots);\n                return;\n            }\n        }\n        drawRobots(newRobots);\n        $8a82902540089ab9$var$raf = requestAnimationFrame(render);\n    });\n}\nconst $8a82902540089ab9$var$inputForm = document.getElementById(\"input-form\");\nif (!($8a82902540089ab9$var$inputForm instanceof HTMLFormElement)) throw new Error(\"no form\");\n$8a82902540089ab9$var$inputForm.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    const formData = new FormData(this);\n    const input = formData.get(\"input\")?.toString() ?? \"\";\n    $8a82902540089ab9$var$draw(input.trim(), $8a82902540089ab9$var$ctx);\n});\n\n\n//# sourceMappingURL=index.0a81cf3d.js.map\n","// @ts-check\n\nimport { V, V3 } from \"./index.js\"\n\n/**\n * @param {string} strVal\n */\nfunction tryGetSeparator(strVal) {\n\tconst separators = [\"\\n\\n\", \"\\n\", \" -> \", \", \", \",\", \" - \", \" \", \"-\"]\n\tfor (const separator of separators) {\n\t\tif (strVal.includes(separator)) {\n\t\t\treturn separator\n\t\t}\n\t}\n\treturn null\n}\n\n/**\n * @template T\n *\n * @typedef {Object} ParserRegistryItem\n * @property {(input: string) => boolean} check\n * @property {(input: string, key?: string) => T} parse\n *\n */\n\n/**\n * @template {ParserRegistryItem<unknown>} T\n *\n * @typedef {T & {withSeparator: (separator: string) => T}} WithSeparator\n */\n\n/**\n * @template {Record<string, ParserRegistryItem<unknown>>} T\n *\n * @param {T} parsers\n * @returns {T}\n */\nfunction registerParsers(parsers) {\n\treturn parsers\n}\n\nconst PARSERS = registerParsers({\n\tint: /** @type {const} */ ({\n\t\tname: \"int\",\n\t\tcheck: (key) => key === \"int\",\n\t\tparse: (strVal) => parseInt(strVal, 10),\n\t}),\n\tstr: /** @type {const} */ ({\n\t\tname: \"str\",\n\t\tcheck: (key) => key === \"str\",\n\t\tparse: (strVal) => strVal,\n\t}),\n\tvec: /** @type {const} */ ({\n\t\tname: \"vec\",\n\t\tcheck: (key) => key === \"vec\",\n\t\tparse: (strVal) => {\n\t\t\tconst separator = tryGetSeparator(strVal)\n\t\t\tif (!separator) {\n\t\t\t\tthrow new Error(`Invalid vec: ${strVal}`)\n\t\t\t}\n\t\t\tconst [x, y] = strVal.split(separator).map(Number)\n\t\t\treturn V.vec(x, y)\n\t\t},\n\t}),\n\tvec3: /** @type {const} */ ({\n\t\tname: \"vec3\",\n\t\tcheck: (key) => key === \"vec3\",\n\t\tparse: (strVal) => {\n\t\t\tconst separator = tryGetSeparator(strVal)\n\t\t\tif (!separator) {\n\t\t\t\tthrow new Error(`Invalid vec3: ${strVal}`)\n\t\t\t}\n\t\t\tconst [x, y, z] = strVal.split(separator).map(Number)\n\t\t\treturn V3.vec3(x, y, z)\n\t\t},\n\t}),\n\tarr: /** @type {const} */ ({\n\t\tname: \"arr\",\n\t\tcheck: (key) => key.endsWith(\"[]\"),\n\t\tparse: (strVal, key = \"\") => {\n\t\t\tconst type = key.slice(0, -2)\n\t\t\tconst parser = getParserByType(type)\n\t\t\tif (!parser) {\n\t\t\t\tthrow new Error(`Invalid array type \"${type}\" in \"${key}\"`)\n\t\t\t}\n\t\t\tconst separator = tryGetSeparator(strVal) ?? \",\"\n\t\t\treturn strVal\n\t\t\t\t.split(separator)\n\t\t\t\t.filter((x) => x !== \"\")\n\t\t\t\t.map((x) => parser.parse(x.trim(), type))\n\t\t},\n\t}),\n\ttuple: /** @type {const} */ ({\n\t\tname: \"tuple\",\n\t\tcheck: (key) => key.startsWith(\"(\") && key.endsWith(\")\"),\n\t\tparse: (strVal, key = \"\") => {\n\t\t\tconst types = key.slice(1, -1).split(\",\")\n\t\t\tconst separator = tryGetSeparator(strVal) ?? \",\"\n\t\t\treturn strVal.split(separator).map((x, i) => {\n\t\t\t\tconst parser = getParserByType(types[i])\n\t\t\t\tif (!parser) {\n\t\t\t\t\tthrow new Error(`Invalid tuple type \"${types[i]}\" in \"${key}\"`)\n\t\t\t\t}\n\t\t\t\treturn parser.parse(x, types[i])\n\t\t\t})\n\t\t},\n\t}),\n})\n\n/**\n * @param {string} type\n * @returns {ParserRegistryItem<unknown> | null}\n */\nfunction getParserByType(type) {\n\tfor (const key in PARSERS) {\n\t\tif (PARSERS[/** @type {keyof typeof PARSERS} */ (key)].check(type)) {\n\t\t\treturn PARSERS[/** @type {keyof typeof PARSERS} */ (key)]\n\t\t}\n\t}\n\treturn null\n}\n\n/**\n * @template T\n *\n * @param {string} strVal\n * @param {string} type\n * @returns {T}\n */\nfunction parse(strVal, type) {\n\tconst parser = getParserByType(type)\n\tif (!parser) {\n\t\tthrow new Error(`Invalid type \"${type}\"`)\n\t}\n\treturn /** @type {T} */ (parser.parse(strVal, type))\n}\n\n/**\n * @template T\n *\n * @typedef {Object} Parser\n * @property {(strVal: string) => T} parse\n */\n\nconst commonTypes = {\n\tint: () => mappableParser(PARSERS.int),\n\n\tstr: () => mappableParser(PARSERS.str),\n\n\tvec: () => mappableParser(PARSERS.vec),\n\n\tvec3: () => mappableParser(PARSERS.vec3),\n\n\t/**\n\t * @template T\n\t *\n\t * @param {Parser<T>} type\n\t * @param {string | RegExp} [separator]\n\t */\n\tarr: (type, separator) =>\n\t\tmappableParser({\n\t\t\tparse: (strVal) => {\n\t\t\t\treturn strVal\n\t\t\t\t\t.split(separator ?? tryGetSeparator(strVal) ?? \",\")\n\t\t\t\t\t.map((x) => x.trim())\n\t\t\t\t\t.filter((x) => x !== \"\")\n\t\t\t\t\t.map((x) => type.parse(x))\n\t\t\t},\n\t\t}),\n\n\t/**\n\t * @template {Parser<unknown>[]} T\n\t *\n\t * @param {import(\"ts-toolbelt\").F.Narrow<T>} types\n\t * @param {string} [separator]\n\t */\n\ttuple: (types, separator) =>\n\t\tmappableParser({\n\t\t\t/**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {{[K in keyof T]: T[K] extends Parser<infer U> ? U : never}}\n\t\t\t */\n\t\t\tparse: (strVal) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn strVal\n\t\t\t\t\t.split(separator ?? tryGetSeparator(strVal) ?? \",\")\n\t\t\t\t\t.map((x, i) => types[i].parse(x))\n\t\t\t},\n\t\t}),\n\n\t/**\n\t * @template {readonly string[]} T\n\t *\n\t * @param {T} values\n\t */\n\tenum: (...values) =>\n\t\tmappableParser({\n\t\t\t/**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {T[number]}\n\t\t\t */\n\t\t\tparse: (strVal) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (!values.includes(strVal)) {\n\t\t\t\t\tthrow new Error(`Invalid enum value \"${strVal}\"`)\n\t\t\t\t}\n\t\t\t\treturn strVal\n\t\t\t},\n\t\t}),\n}\n\n/**\n * @template T\n * @param {Parser<T>} parser\n */\nfunction mappableParser(parser) {\n\treturn {\n\t\t...parser,\n\t\t/**\n\t\t * @template U\n\t\t * @param {(val: T) => U} fn\n\t\t */\n\t\tmap: (fn) => mappableParser({ ...parser, parse: (x) => fn(parser.parse(x)) }),\n\t}\n}\n\n/**\n * @template {(string)[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param {T} keys\n */\nfunction tpl(strings, ...keys) {\n\t/**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as import(\"./types.js\").TemplateKey<P>]: import(\"./types.js\").TemplateValue<P> }}\n\t */\n\tfunction parseInternal(input) {\n\t\t/** @type {Record<string, any>} */\n\t\tconst model = {}\n\t\tlet lastIndex = 0\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst start = strings[i].length + lastIndex\n\t\t\tconst end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length\n\t\t\tconst strVal = input.slice(start, end)\n\t\t\tconst [key, type] = keys[i].split(\"|\")\n\t\t\tmodel[key] = parse(strVal, type)\n\t\t\tlastIndex = end\n\t\t}\n\t\treturn /** @type {any} */ (model)\n\t}\n\n\treturn mappableParser({ parse: parseInternal })\n}\n\n/**\n * @template {string} K\n * @template T\n *\n * @param {K} name\n * @param {Parser<T>} parser\n * @returns {NamedParser<K, T>}\n */\nfunction named(name, parser) {\n\treturn {\n\t\t...parser,\n\t\tname,\n\t}\n}\n\n/**\n * @template {string} K\n * @template T\n *\n * @typedef {object} NamedParser\n *\n * @property {(strVal: string) => T} parse\n * @property {K} name\n */\n\n/**\n * @template {NamedParser<any, any>[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param  {T} keys\n */\nfunction tpl2(strings, ...keys) {\n\t/**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as P['name']]: ReturnType<P['parse']> }}\n\t */\n\tfunction parseInternal(input) {\n\t\t/** @type {Record<string, any>} */\n\t\tconst model = {}\n\t\tlet lastIndex = 0\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst start = strings[i].length + lastIndex\n\t\t\tconst end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length\n\t\t\tconst strVal = input.slice(start, end)\n\t\t\tconst namedParser = keys[i]\n\t\t\tmodel[namedParser.name] = namedParser.parse(strVal)\n\t\t\tlastIndex = end\n\t\t}\n\t\treturn /** @type {any} */ (model)\n\t}\n\n\treturn mappableParser({ parse: parseInternal })\n}\n\nexport const t = {\n\t...commonTypes,\n\tnamed,\n\ttpl,\n\ttpl2,\n}\n","// @ts-check\nimport \"../../../js/modules/iterator-extensions.js\"\nimport { parseInput, calc, robotsMatchesPattern, pattern } from \"../../../js/solutions/14.js\"\nimport { V } from \"../../../js/modules/index.js\"\nimport { scaleCanvasToPixelRatio } from \"../common.js\"\n\nconst canvas = document.getElementById(\"canvas\")\nif (!(canvas instanceof HTMLCanvasElement)) throw new Error(\"no canvas\")\n\nconst ctx = canvas.getContext(\"2d\")\nif (!ctx) throw new Error(\"no ctx\")\n\nconst width = 101\nconst height = 103\n\nconst scale = 3 // Math.min(10, Math.max(2, 200 / width))\n\nconst cols = 1\n\nscaleCanvasToPixelRatio(ctx, cols * width * scale, height * scale)\n\nlet raf = 0\nlet unsubscribe = () => {}\n/**\n * @param {string} input\n * @param {CanvasRenderingContext2D} ctx\n */\nfunction draw(input, ctx) {\n\tcancelAnimationFrame(raf)\n\tunsubscribe()\n\tconst robots = parseInput(input)\n\n\tscaleCanvasToPixelRatio(ctx, width * scale, height * scale)\n\n\tctx.canvas.scrollIntoView({ behavior: \"smooth\" })\n\n\tconst drawRobots = (/** @type {{ pos: V.Vec2; vel: V.Vec2; }[]} */ robots) => {\n\t\tctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\t\tctx.fillStyle = \"white\"\n\t\tctx.fillRect(0, 0, width * scale, height * scale)\n\n\t\tfor (const robot of robots) {\n\t\t\tctx.fillStyle = \"#becfaa\"\n\t\t\tctx.beginPath()\n\t\t\tctx.arc(robot.pos[0] * scale, robot.pos[1] * scale, scale / 2, 0, Math.PI * 2)\n\t\t\tctx.closePath()\n\t\t\tctx.fill()\n\t\t}\n\t}\n\n\tconst timeInput = document.getElementById(\"time\")\n\tconst timeOutput = document.getElementById(\"time-output\")\n\n\tif (!(timeInput instanceof HTMLInputElement)) throw new Error(\"no input\")\n\tif (!(timeOutput instanceof HTMLSpanElement)) throw new Error(\"no output\")\n\n\tlet time = 0\n\n\tconst refreshRobotDisplay = function () {\n\t\tconst t = parseInt(this.value)\n\t\tif (isNaN(t)) return\n\t\ttime = t\n\n\t\tconst newRobots = robots.map((robot) => ({\n\t\t\tpos: calc(robot.pos, robot.vel, t),\n\t\t\tvel: robot.vel,\n\t\t}))\n\n\t\tdrawRobots(newRobots)\n\n\t\tconst timeStr = t.toString()\n\t\ttimeOutput.textContent = timeStr\n\t}\n\n\ttimeInput.disabled = false\n\n\ttimeInput.addEventListener(\"input\", refreshRobotDisplay)\n\tunsubscribe = () => timeInput.removeEventListener(\"input\", refreshRobotDisplay)\n\n\traf = requestAnimationFrame(function render() {\n\t\tlet newRobots = robots\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\ttime++\n\t\t\tnewRobots = robots.map((robot) => ({\n\t\t\t\tpos: calc(robot.pos, robot.vel, time),\n\t\t\t\tvel: robot.vel,\n\t\t\t}))\n\t\t\tconst timeStr = time.toString()\n\t\t\ttimeOutput.textContent = timeStr\n\t\t\ttimeInput.value = timeStr\n\t\t\tif (robotsMatchesPattern(newRobots, pattern)) {\n\t\t\t\tdrawRobots(newRobots)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tdrawRobots(newRobots)\n\n\t\traf = requestAnimationFrame(render)\n\t})\n}\n\nconst inputForm = document.getElementById(\"input-form\")\nif (!(inputForm instanceof HTMLFormElement)) throw new Error(\"no form\")\n\ninputForm.addEventListener(\"submit\", function (e) {\n\te.preventDefault()\n\tconst formData = new FormData(this)\n\tconst input = formData.get(\"input\")?.toString() ?? \"\"\n\tdraw(input.trim(), ctx)\n})\n","// @ts-check\n\nimport { Array2d, Lib, V } from \"../modules/index.js\"\nimport { iterate } from \"../modules/itertools.js\"\nimport { t } from \"../modules/parser.js\"\n\nexport const useExample = false\n\nexport const exampleInput = `\\\np=0,4 v=3,-3\np=6,3 v=-1,-3\np=10,3 v=-1,2\np=2,0 v=2,-1\np=0,0 v=1,3\np=3,0 v=-2,-2\np=7,6 v=-1,-3\np=3,0 v=-1,-2\np=9,3 v=2,3\np=7,3 v=-1,2\np=2,4 v=2,-3\np=9,5 v=-3,-3`\n\nconst width = 101\nconst height = 103\n\n/** @typedef {ReturnType<typeof parseInput>} InputType */\n\nconst lineParser = t.tpl`p=${\"pos|vec\"} v=${\"vel|vec\"}`\nexport const parseInput = t.arr(lineParser).parse\n\n/**\n * @param {V.Vec2} pos\n * @param {V.Vec2} vel\n * @param {number} t\n */\nexport function calc(pos, vel, t) {\n\tconst target = V.add(pos, V.scale(vel, t))\n\treturn V.vec(Lib.mod(target[0], width), Lib.mod(target[1], height))\n}\n\n/**\n * @param {V.Vec2[]} positions\n */\nfunction print(positions) {\n\tconst arr = Array.from({ length: height }, () => Array(width).fill(\".\"))\n\tfor (const pos of positions) Array2d.set(arr, pos, \"#\")\n\treturn arr.map((line) => line.join(\"\")).join(\"\\n\")\n}\n\n/**\n * @param {InputType} input\n */\nexport function part1(input) {\n\tconst width = 101\n\tconst height = 103\n\n\tconst cx = (width - 1) / 2\n\tconst cy = (height - 1) / 2\n\n\treturn input\n\t\t.values()\n\t\t.map((r) => calc(r.pos, r.vel, 100))\n\t\t.filter((p) => V.x(p) !== cx && V.y(p) !== cy)\n\t\t.groupBy((pos) => {\n\t\t\tif (V.x(pos) < cx && V.y(pos) < cy) return 1\n\t\t\tif (V.x(pos) > cx && V.y(pos) < cy) return 2\n\t\t\tif (V.x(pos) < cx && V.y(pos) > cy) return 3\n\t\t\treturn 4\n\t\t})\n\t\t.values()\n\t\t.map((x) => x.length)\n\t\t.multiply()\n}\n\n/**\n * @param {InputType} robots\n * @param {string} pattern\n */\nexport function robotsMatchesPattern(robots, pattern) {\n\treturn print(robots.map((r) => r.pos)).includes(pattern)\n}\n\n/**\n * @param {InputType} r\n */\nexport function next(r) {\n\treturn r.map(({ pos, vel }) => ({ pos: calc(pos, vel, 1), vel }))\n}\n\nexport const pattern = \"#\".repeat(10)\n\n/**\n * @param {InputType} input\n */\nexport function part2(input) {\n\treturn iterate(input, next)\n\t\t.map((r) => r.map(({ pos }) => pos))\n\t\t.map((r) => print(r))\n\t\t.takeUntil((str) => str.includes(pattern))\n\t\t.count()\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$ef4119ef3a0ad5e7$export$625550452a3fa3ec","set","s","enumerable","configurable","$3Ru88","$ef4119ef3a0ad5e7$var$tryGetSeparator","strVal","separator","includes","$ef4119ef3a0ad5e7$var$PARSERS","int","name","check","key","parse","parseInt","str","vec","x","y","split","map","Number","V","vec3","z","V3","arr","endsWith","type","slice","parser","$ef4119ef3a0ad5e7$var$getParserByType","filter","trim","tuple","startsWith","types","i","$ef4119ef3a0ad5e7$var$mappableParser","fn","enum","values","named","tpl","strings","keys","input","model","lastIndex","length","start","end","indexOf","$ef4119ef3a0ad5e7$var$parse","tpl2","namedParser","$kxxN7","$bed1b6c72a580a04$var$lineParser","t","$bed1b6c72a580a04$export$20bebb8aee8dd3f5","$bed1b6c72a580a04$export$42bfa9b2d4dad91a","pos","vel","target","add","scale","Lib","mod","$bed1b6c72a580a04$export$24f82734ea047e6f","repeat","$7zFg5","$8a82902540089ab9$var$canvas","document","getElementById","HTMLCanvasElement","$8a82902540089ab9$var$ctx","getContext","scaleCanvasToPixelRatio","$8a82902540089ab9$var$cols","$8a82902540089ab9$var$height","$8a82902540089ab9$var$raf","$8a82902540089ab9$var$unsubscribe","$8a82902540089ab9$var$inputForm","HTMLFormElement","addEventListener","e","preventDefault","formData","FormData","$8a82902540089ab9$var$draw","ctx","cancelAnimationFrame","robots","$8a82902540089ab9$var$width","canvas","scrollIntoView","behavior","drawRobots","robot","clearRect","width","height","fillStyle","fillRect","beginPath","arc","$8a82902540089ab9$var$scale","Math","PI","closePath","fill","timeInput","timeOutput","HTMLInputElement","HTMLSpanElement","time","refreshRobotDisplay","value","isNaN","timeStr","toString","textContent","disabled","removeEventListener","requestAnimationFrame","render","newRobots","$bed1b6c72a580a04$var$print","positions","Array","from","Array2d","line","join","r"],"version":3,"file":"index.0a81cf3d.js.map"}