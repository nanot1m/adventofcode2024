{"mappings":"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","sources":["<anon>","../js/modules/parser.js","src/day15/index.js","../js/solutions/15.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2GOZM\", function(module, exports) {\n\n$parcel$export(module.exports, \"t\", () => $1f570fa1186bcdbc$export$625550452a3fa3ec);\n// @ts-check\n\nvar $iHpWs = parcelRequire(\"iHpWs\");\n/**\n * @param {string} strVal\n */ function $1f570fa1186bcdbc$var$tryGetSeparator(strVal) {\n    const separators = [\n        \"\\n\\n\",\n        \"\\n\",\n        \" -> \",\n        \", \",\n        \",\",\n        \" - \",\n        \" \",\n        \"-\"\n    ];\n    for (const separator of separators){\n        if (strVal.includes(separator)) return separator;\n    }\n    return null;\n}\n/**\n * @template T\n *\n * @typedef {Object} ParserRegistryItem\n * @property {(input: string) => boolean} check\n * @property {(input: string, key?: string) => T} parse\n *\n */ /**\n * @template {ParserRegistryItem<unknown>} T\n *\n * @typedef {T & {withSeparator: (separator: string) => T}} WithSeparator\n */ /**\n * @template {Record<string, ParserRegistryItem<unknown>>} T\n *\n * @param {T} parsers\n * @returns {T}\n */ function $1f570fa1186bcdbc$var$registerParsers(parsers) {\n    return parsers;\n}\nconst $1f570fa1186bcdbc$var$PARSERS = $1f570fa1186bcdbc$var$registerParsers({\n    int: /** @type {const} */ {\n        name: \"int\",\n        check: (key)=>key === \"int\",\n        parse: (strVal)=>parseInt(strVal, 10)\n    },\n    str: /** @type {const} */ {\n        name: \"str\",\n        check: (key)=>key === \"str\",\n        parse: (strVal)=>strVal\n    },\n    vec: /** @type {const} */ {\n        name: \"vec\",\n        check: (key)=>key === \"vec\",\n        parse: (strVal)=>{\n            const separator = $1f570fa1186bcdbc$var$tryGetSeparator(strVal);\n            if (!separator) throw new Error(`Invalid vec: ${strVal}`);\n            const [x, y] = strVal.split(separator).map(Number);\n            return (0, $iHpWs.V).vec(x, y);\n        }\n    },\n    vec3: /** @type {const} */ {\n        name: \"vec3\",\n        check: (key)=>key === \"vec3\",\n        parse: (strVal)=>{\n            const separator = $1f570fa1186bcdbc$var$tryGetSeparator(strVal);\n            if (!separator) throw new Error(`Invalid vec3: ${strVal}`);\n            const [x, y, z] = strVal.split(separator).map(Number);\n            return (0, $iHpWs.V3).vec3(x, y, z);\n        }\n    },\n    arr: /** @type {const} */ {\n        name: \"arr\",\n        check: (key)=>key.endsWith(\"[]\"),\n        parse: (strVal, key = \"\")=>{\n            const type = key.slice(0, -2);\n            const parser = $1f570fa1186bcdbc$var$getParserByType(type);\n            if (!parser) throw new Error(`Invalid array type \"${type}\" in \"${key}\"`);\n            const separator = $1f570fa1186bcdbc$var$tryGetSeparator(strVal) ?? \",\";\n            return strVal.split(separator).filter((x)=>x !== \"\").map((x)=>parser.parse(x.trim(), type));\n        }\n    },\n    tuple: /** @type {const} */ {\n        name: \"tuple\",\n        check: (key)=>key.startsWith(\"(\") && key.endsWith(\")\"),\n        parse: (strVal, key = \"\")=>{\n            const types = key.slice(1, -1).split(\",\");\n            const separator = $1f570fa1186bcdbc$var$tryGetSeparator(strVal) ?? \",\";\n            return strVal.split(separator).map((x, i)=>{\n                const parser = $1f570fa1186bcdbc$var$getParserByType(types[i]);\n                if (!parser) throw new Error(`Invalid tuple type \"${types[i]}\" in \"${key}\"`);\n                return parser.parse(x, types[i]);\n            });\n        }\n    }\n});\n/**\n * @param {string} type\n * @returns {ParserRegistryItem<unknown> | null}\n */ function $1f570fa1186bcdbc$var$getParserByType(type) {\n    for(const key in $1f570fa1186bcdbc$var$PARSERS){\n        if ($1f570fa1186bcdbc$var$PARSERS[/** @type {keyof typeof PARSERS} */ key].check(type)) return $1f570fa1186bcdbc$var$PARSERS[/** @type {keyof typeof PARSERS} */ key];\n    }\n    return null;\n}\n/**\n * @template T\n *\n * @param {string} strVal\n * @param {string} type\n * @returns {T}\n */ function $1f570fa1186bcdbc$var$parse(strVal, type) {\n    const parser = $1f570fa1186bcdbc$var$getParserByType(type);\n    if (!parser) throw new Error(`Invalid type \"${type}\"`);\n    return /** @type {T} */ parser.parse(strVal, type);\n}\n/**\n * @template T\n *\n * @typedef {Object} Parser\n * @property {(strVal: string) => T} parse\n */ const $1f570fa1186bcdbc$var$commonTypes = {\n    int: ()=>$1f570fa1186bcdbc$var$mappableParser($1f570fa1186bcdbc$var$PARSERS.int),\n    str: ()=>$1f570fa1186bcdbc$var$mappableParser($1f570fa1186bcdbc$var$PARSERS.str),\n    vec: ()=>$1f570fa1186bcdbc$var$mappableParser($1f570fa1186bcdbc$var$PARSERS.vec),\n    vec3: ()=>$1f570fa1186bcdbc$var$mappableParser($1f570fa1186bcdbc$var$PARSERS.vec3),\n    /**\n\t * @template T\n\t *\n\t * @param {Parser<T>} type\n\t * @param {string | RegExp} [separator]\n\t */ arr: (type, separator)=>$1f570fa1186bcdbc$var$mappableParser({\n            parse: (strVal)=>{\n                return strVal.split(separator ?? $1f570fa1186bcdbc$var$tryGetSeparator(strVal) ?? \",\").map((x)=>x.trim()).filter((x)=>x !== \"\").map((x)=>type.parse(x));\n            }\n        }),\n    /**\n\t * @template {Parser<unknown>[]} T\n\t *\n\t * @param {import(\"ts-toolbelt\").F.Narrow<T>} types\n\t * @param {string} [separator]\n\t */ tuple: (types, separator)=>$1f570fa1186bcdbc$var$mappableParser({\n            /**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {{[K in keyof T]: T[K] extends Parser<infer U> ? U : never}}\n\t\t\t */ parse: (strVal)=>{\n                // @ts-ignore\n                return strVal.split(separator ?? $1f570fa1186bcdbc$var$tryGetSeparator(strVal) ?? \",\").map((x, i)=>types[i].parse(x));\n            }\n        }),\n    /**\n\t * @template {readonly string[]} T\n\t *\n\t * @param {T} values\n\t */ enum: (...values)=>$1f570fa1186bcdbc$var$mappableParser({\n            /**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {T[number]}\n\t\t\t */ parse: (strVal)=>{\n                // @ts-ignore\n                if (!values.includes(strVal)) throw new Error(`Invalid enum value \"${strVal}\"`);\n                return strVal;\n            }\n        })\n};\n/**\n * @template T\n * @param {Parser<T>} parser\n */ function $1f570fa1186bcdbc$var$mappableParser(parser) {\n    return {\n        ...parser,\n        /**\n\t\t * @template U\n\t\t * @param {(val: T) => U} fn\n\t\t */ map: (fn)=>$1f570fa1186bcdbc$var$mappableParser({\n                ...parser,\n                parse: (x)=>fn(parser.parse(x))\n            })\n    };\n}\n/**\n * @template {(string)[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param {T} keys\n */ function $1f570fa1186bcdbc$var$tpl(strings, ...keys) {\n    /**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as import(\"./types.js\").TemplateKey<P>]: import(\"./types.js\").TemplateValue<P> }}\n\t */ function parseInternal(input) {\n        /** @type {Record<string, any>} */ const model = {};\n        let lastIndex = 0;\n        for(let i = 0; i < keys.length; i++){\n            const start = strings[i].length + lastIndex;\n            const end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length;\n            const strVal = input.slice(start, end);\n            const [key, type] = keys[i].split(\"|\");\n            model[key] = $1f570fa1186bcdbc$var$parse(strVal, type);\n            lastIndex = end;\n        }\n        return /** @type {any} */ model;\n    }\n    return $1f570fa1186bcdbc$var$mappableParser({\n        parse: parseInternal\n    });\n}\n/**\n * @template {string} K\n * @template T\n *\n * @param {K} name\n * @param {Parser<T>} parser\n * @returns {NamedParser<K, T>}\n */ function $1f570fa1186bcdbc$var$named(name, parser) {\n    return {\n        ...parser,\n        name: name\n    };\n}\n/**\n * @template {string} K\n * @template T\n *\n * @typedef {object} NamedParser\n *\n * @property {(strVal: string) => T} parse\n * @property {K} name\n */ /**\n * @template {NamedParser<any, any>[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param  {T} keys\n */ function $1f570fa1186bcdbc$var$tpl2(strings, ...keys) {\n    /**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as P['name']]: ReturnType<P['parse']> }}\n\t */ function parseInternal(input) {\n        /** @type {Record<string, any>} */ const model = {};\n        let lastIndex = 0;\n        for(let i = 0; i < keys.length; i++){\n            const start = strings[i].length + lastIndex;\n            const end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length;\n            const strVal = input.slice(start, end);\n            const namedParser = keys[i];\n            model[namedParser.name] = namedParser.parse(strVal);\n            lastIndex = end;\n        }\n        return /** @type {any} */ model;\n    }\n    return $1f570fa1186bcdbc$var$mappableParser({\n        parse: parseInternal\n    });\n}\nconst $1f570fa1186bcdbc$export$625550452a3fa3ec = {\n    ...$1f570fa1186bcdbc$var$commonTypes,\n    named: $1f570fa1186bcdbc$var$named,\n    tpl: $1f570fa1186bcdbc$var$tpl,\n    tpl2: $1f570fa1186bcdbc$var$tpl2\n};\n\n});\n\n// @ts-check\nparcelRequire(\"jOplp\");\n// @ts-check\n\nvar $d81pG = parcelRequire(\"d81pG\");\n\nvar $iHpWs = parcelRequire(\"iHpWs\");\n\nvar $k3N1b = parcelRequire(\"k3N1b\");\n\nvar $2GOZM = parcelRequire(\"2GOZM\");\nconst $97d31368c6682dce$export$c2ab8e3711492050 = false;\nconst $97d31368c6682dce$export$a92a7d01225c1610 = `\\\n##########\n#..O..O.O#\n#......O.#\n#.OO..O.O#\n#..O@..O.#\n#O#..O...#\n#O..O..O.#\n#.OO.O.OO#\n#....O...#\n##########\n\n<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^\nvvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v\n><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<\n<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^\n^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><\n^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^\n>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^\n<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>\n^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>\nv^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`;\nconst $97d31368c6682dce$export$20bebb8aee8dd3f5 = (0, $2GOZM.t).tuple([\n    (0, $iHpWs.Array2d),\n    (0, $2GOZM.t).str().map((l)=>l.replaceAll(\"\\n\", \"\")).map((l)=>l.split(\"\").map((0, $iHpWs.V).asArrow))\n]).parse;\nconst $97d31368c6682dce$var$isBox = (/** @type {string} */ c)=>c === \"O\" || c === \"[\" || c === \"]\";\nconst $97d31368c6682dce$var$getBoxPositions = (/** @type {string[][]} */ map, /** @type {V.Vec2} */ pos)=>(0, $iHpWs.Array2d).get(map, pos) === \"[\" ? [\n        pos,\n        (0, $iHpWs.V).add(pos, (0, $iHpWs.V).DIR_TO_VEC.R)\n    ] // []\n     : (0, $iHpWs.Array2d).get(map, pos) === \"]\" ? [\n        (0, $iHpWs.V).add(pos, (0, $iHpWs.V).DIR_TO_VEC.L),\n        pos\n    ] // []\n     : [\n        pos\n    ] // O\n;\nconst $97d31368c6682dce$var$canMove = (/** @type {string[][]} */ map, /** @type {V.Vec2} */ pos, /** @type {V.Vec2} */ dir)=>(0, $iHpWs.Array2d).get(map, (0, $iHpWs.V).add(pos, dir)) !== \"#\";\n/**\n * @param {string[][]} map\n * @param {V.Vec2} pos\n * @param {V.Arrow} arrow\n */ function $97d31368c6682dce$var$makeMove(map, pos, arrow) {\n    const dir = (0, $iHpWs.V).fromArrow(arrow);\n    const targetPos = (0, $iHpWs.V).add(pos, dir);\n    if ((0, $iHpWs.Array2d).get(map, targetPos) === \"#\") return pos;\n    if ((0, $iHpWs.Array2d).get(map, targetPos) === \".\") return targetPos;\n    // targetPos is a box\n    const allBoxes = (0, $d81pG.dijkstra)((pos)=>$97d31368c6682dce$var$getBoxPositions(map, (0, $iHpWs.V).add(pos, dir)).filter((x)=>$97d31368c6682dce$var$isBox((0, $iHpWs.Array2d).get(map, x))), (pos)=>(0, $iHpWs.V).mLen(pos, targetPos), $97d31368c6682dce$var$getBoxPositions(map, targetPos), (0, $iHpWs.V).toString).map((x)=>x.value).toArray().reverse();\n    if (allBoxes.some((box)=>!$97d31368c6682dce$var$canMove(map, box, dir))) return pos;\n    for (const box of allBoxes){\n        (0, $iHpWs.Array2d).set(map, (0, $iHpWs.V).add(box, dir), (0, $iHpWs.Array2d).get(map, box));\n        (0, $iHpWs.Array2d).set(map, box, \".\");\n    }\n    return targetPos;\n}\nfunction* $97d31368c6682dce$export$f13c3f1b35f97f1a(map, arrows) {\n    const start = (0, $iHpWs.Array2d).traverse(map).find((p)=>p.value === \"@\").pos;\n    (0, $iHpWs.Array2d).set(map, start, \".\");\n    let cur = start;\n    yield (0, $k3N1b.tuple)(cur, map, \"start\");\n    for (const arrow of arrows){\n        cur = $97d31368c6682dce$var$makeMove(map, cur, arrow);\n        yield (0, $k3N1b.tuple)(cur, map, arrow);\n    }\n}\nfunction $97d31368c6682dce$export$6e3fa38cfddb4746(input) {\n    const [map, arrows] = input;\n    const lst = $97d31368c6682dce$export$f13c3f1b35f97f1a(map, arrows).last();\n    return (0, $iHpWs.Array2d).traverse(lst[1]).filter((p)=>p.value === \"O\").map((p)=>(0, $iHpWs.V).y(p.pos) * 100 + (0, $iHpWs.V).x(p.pos)).sum();\n}\nfunction $97d31368c6682dce$export$c1996d2fd5595c6b(map) {\n    return map.map((row)=>row.flatMap((cell)=>{\n            return cell === \"#\" ? [\n                \"#\",\n                \"#\"\n            ] : cell === \"O\" ? [\n                \"[\",\n                \"]\"\n            ] : [\n                cell,\n                \".\"\n            ];\n        }));\n}\nfunction $97d31368c6682dce$export$9fb73bf15c9f3bcd(input) {\n    const [map, arrows] = input;\n    const wideMap = $97d31368c6682dce$export$c1996d2fd5595c6b(map);\n    const lst = $97d31368c6682dce$export$f13c3f1b35f97f1a(wideMap, arrows).last();\n    return (0, $iHpWs.Array2d).traverse(lst[1]).filter((p)=>p.value === \"[\").map((p)=>(0, $iHpWs.V).y(p.pos) * 100 + (0, $iHpWs.V).x(p.pos)).sum();\n}\n\n\n\nvar $iHpWs = parcelRequire(\"iHpWs\");\n\nvar $7zFg5 = parcelRequire(\"7zFg5\");\nconst $e05c23bb78ca56be$var$canvas = document.getElementById(\"canvas\");\nif (!($e05c23bb78ca56be$var$canvas instanceof HTMLCanvasElement)) throw new Error(\"no canvas\");\nconst $e05c23bb78ca56be$var$ctx = $e05c23bb78ca56be$var$canvas.getContext(\"2d\");\nif (!$e05c23bb78ca56be$var$ctx) throw new Error(\"no ctx\");\nconst $e05c23bb78ca56be$var$INIT_WIDTH = 300;\nconst $e05c23bb78ca56be$var$INIT_HEIGHT = 300;\nconst $e05c23bb78ca56be$var$INIT_SCALE = 1;\n(0, $7zFg5.scaleCanvasToPixelRatio)($e05c23bb78ca56be$var$ctx, $e05c23bb78ca56be$var$INIT_WIDTH * $e05c23bb78ca56be$var$INIT_SCALE, $e05c23bb78ca56be$var$INIT_HEIGHT * $e05c23bb78ca56be$var$INIT_SCALE);\nconst $e05c23bb78ca56be$var$colors = {\n    green: \"#91cfa1\",\n    red: \"#ea859a\",\n    yellow: \"#fef59d\",\n    text: '#fee15b'\n};\nlet $e05c23bb78ca56be$var$raf = 0;\nlet $e05c23bb78ca56be$var$unsubscribe = ()=>{};\n/**\n * @param {string} input\n * @param {CanvasRenderingContext2D} ctx\n * @param {boolean} part2\n */ function $e05c23bb78ca56be$var$draw(input, ctx, part2) {\n    cancelAnimationFrame($e05c23bb78ca56be$var$raf);\n    $e05c23bb78ca56be$var$unsubscribe();\n    let [map, arrows] = (0, $97d31368c6682dce$export$20bebb8aee8dd3f5)(input);\n    let width = window.innerWidth / 2 - 32;\n    let height = width;\n    if (part2) {\n        map = (0, $97d31368c6682dce$export$c1996d2fd5595c6b)(map);\n        width *= 2;\n    }\n    const mapWidth = map[0].length;\n    const scale = width / mapWidth;\n    (0, $7zFg5.scaleCanvasToPixelRatio)(ctx, width, height);\n    ctx.canvas.scrollIntoView({\n        behavior: \"smooth\"\n    });\n    const drawMap = (/** @type {string[][]} */ map, /** @type {V.Vec2} */ robot)=>{\n        ctx.clearRect(0, 0, width, height);\n        ctx.font = `${scale}px monospace`;\n        map.forEach((row, y)=>{\n            row.forEach((cell, x)=>{\n                ctx.fillStyle = 'white';\n                ctx.fillRect(x * scale, y * scale, scale, scale);\n                const padding = scale * 0.05;\n                // draw floor tile\n                ctx.fillStyle = $e05c23bb78ca56be$var$colors.yellow;\n                ctx.fillRect(x * scale + padding, y * scale + padding, scale - padding * 2, scale - padding * 2);\n                ctx.font = `${scale}px monospace`;\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"top\";\n                if ((0, $iHpWs.V).eq((0, $iHpWs.V).vec(x, y), robot)) {\n                    // draw robot emoji\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.text;\n                    ctx.fillText(\"\\uD83E\\uDD16\", x * scale + scale / 2, y * scale);\n                }\n                if (cell === \"#\") {\n                    // draw wall\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.red;\n                    ctx.fillRect(x * scale + padding, y * scale + padding, scale - padding * 2, scale - padding * 2);\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.text;\n                    ctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2);\n                }\n                if (cell === \"O\") {\n                    // draw box on the floor\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.green;\n                    ctx.fillRect(x * scale + padding, y * scale + padding, scale - padding * 2, scale - padding * 2);\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.text;\n                    ctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2);\n                }\n                if (cell === \"[\") {\n                    // draw box on the floor\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.green;\n                    ctx.fillRect(x * scale + padding, y * scale + padding, scale - padding, scale - padding * 2);\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.text;\n                    ctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2);\n                }\n                if (cell === \"]\") {\n                    // draw box on the floor\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.green;\n                    ctx.fillRect(x * scale, y * scale + padding, scale - padding, scale - padding * 2);\n                    ctx.fillStyle = $e05c23bb78ca56be$var$colors.text;\n                    ctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2);\n                }\n            });\n        });\n    };\n    const iter = (0, $97d31368c6682dce$export$f13c3f1b35f97f1a)(map, arrows);\n    let lastDt = 0;\n    $e05c23bb78ca56be$var$raf = requestAnimationFrame(function render(dt) {\n        if (dt - lastDt > 30) {\n            lastDt = dt;\n            const { value: value, done: done } = iter.next();\n            if (done) {\n                $e05c23bb78ca56be$var$unsubscribe();\n                return;\n            }\n            const [robot, map] = value;\n            drawMap(map, robot);\n        }\n        $e05c23bb78ca56be$var$raf = requestAnimationFrame(render);\n    });\n}\nconst $e05c23bb78ca56be$var$inputForm = document.getElementById(\"input-form\");\nif (!($e05c23bb78ca56be$var$inputForm instanceof HTMLFormElement)) throw new Error(\"no form\");\n$e05c23bb78ca56be$var$inputForm.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    const formData = new FormData(this);\n    const input = formData.get(\"input\")?.toString() ?? \"\";\n    $e05c23bb78ca56be$var$draw(input.trim(), $e05c23bb78ca56be$var$ctx, formData.get(\"part2\")?.toString() === \"on\");\n});\n// @ts-ignore\n$e05c23bb78ca56be$var$inputForm.querySelector(\"#input\").textContent = `\\\n##########\n#..O..O.O#\n#......O.#\n#.OO..O.O#\n#..O@..O.#\n#O#..O...#\n#O..O..O.#\n#.OO.O.OO#\n#....O...#\n##########\n\n<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^\nvvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v\n><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<\n<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^\n^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><\n^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^\n>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^\n<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>\n^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>\nv^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`;\n\n\n//# sourceMappingURL=index.acde3242.js.map\n","// @ts-check\n\nimport { V, V3 } from \"./index.js\"\n\n/**\n * @param {string} strVal\n */\nfunction tryGetSeparator(strVal) {\n\tconst separators = [\"\\n\\n\", \"\\n\", \" -> \", \", \", \",\", \" - \", \" \", \"-\"]\n\tfor (const separator of separators) {\n\t\tif (strVal.includes(separator)) {\n\t\t\treturn separator\n\t\t}\n\t}\n\treturn null\n}\n\n/**\n * @template T\n *\n * @typedef {Object} ParserRegistryItem\n * @property {(input: string) => boolean} check\n * @property {(input: string, key?: string) => T} parse\n *\n */\n\n/**\n * @template {ParserRegistryItem<unknown>} T\n *\n * @typedef {T & {withSeparator: (separator: string) => T}} WithSeparator\n */\n\n/**\n * @template {Record<string, ParserRegistryItem<unknown>>} T\n *\n * @param {T} parsers\n * @returns {T}\n */\nfunction registerParsers(parsers) {\n\treturn parsers\n}\n\nconst PARSERS = registerParsers({\n\tint: /** @type {const} */ ({\n\t\tname: \"int\",\n\t\tcheck: (key) => key === \"int\",\n\t\tparse: (strVal) => parseInt(strVal, 10),\n\t}),\n\tstr: /** @type {const} */ ({\n\t\tname: \"str\",\n\t\tcheck: (key) => key === \"str\",\n\t\tparse: (strVal) => strVal,\n\t}),\n\tvec: /** @type {const} */ ({\n\t\tname: \"vec\",\n\t\tcheck: (key) => key === \"vec\",\n\t\tparse: (strVal) => {\n\t\t\tconst separator = tryGetSeparator(strVal)\n\t\t\tif (!separator) {\n\t\t\t\tthrow new Error(`Invalid vec: ${strVal}`)\n\t\t\t}\n\t\t\tconst [x, y] = strVal.split(separator).map(Number)\n\t\t\treturn V.vec(x, y)\n\t\t},\n\t}),\n\tvec3: /** @type {const} */ ({\n\t\tname: \"vec3\",\n\t\tcheck: (key) => key === \"vec3\",\n\t\tparse: (strVal) => {\n\t\t\tconst separator = tryGetSeparator(strVal)\n\t\t\tif (!separator) {\n\t\t\t\tthrow new Error(`Invalid vec3: ${strVal}`)\n\t\t\t}\n\t\t\tconst [x, y, z] = strVal.split(separator).map(Number)\n\t\t\treturn V3.vec3(x, y, z)\n\t\t},\n\t}),\n\tarr: /** @type {const} */ ({\n\t\tname: \"arr\",\n\t\tcheck: (key) => key.endsWith(\"[]\"),\n\t\tparse: (strVal, key = \"\") => {\n\t\t\tconst type = key.slice(0, -2)\n\t\t\tconst parser = getParserByType(type)\n\t\t\tif (!parser) {\n\t\t\t\tthrow new Error(`Invalid array type \"${type}\" in \"${key}\"`)\n\t\t\t}\n\t\t\tconst separator = tryGetSeparator(strVal) ?? \",\"\n\t\t\treturn strVal\n\t\t\t\t.split(separator)\n\t\t\t\t.filter((x) => x !== \"\")\n\t\t\t\t.map((x) => parser.parse(x.trim(), type))\n\t\t},\n\t}),\n\ttuple: /** @type {const} */ ({\n\t\tname: \"tuple\",\n\t\tcheck: (key) => key.startsWith(\"(\") && key.endsWith(\")\"),\n\t\tparse: (strVal, key = \"\") => {\n\t\t\tconst types = key.slice(1, -1).split(\",\")\n\t\t\tconst separator = tryGetSeparator(strVal) ?? \",\"\n\t\t\treturn strVal.split(separator).map((x, i) => {\n\t\t\t\tconst parser = getParserByType(types[i])\n\t\t\t\tif (!parser) {\n\t\t\t\t\tthrow new Error(`Invalid tuple type \"${types[i]}\" in \"${key}\"`)\n\t\t\t\t}\n\t\t\t\treturn parser.parse(x, types[i])\n\t\t\t})\n\t\t},\n\t}),\n})\n\n/**\n * @param {string} type\n * @returns {ParserRegistryItem<unknown> | null}\n */\nfunction getParserByType(type) {\n\tfor (const key in PARSERS) {\n\t\tif (PARSERS[/** @type {keyof typeof PARSERS} */ (key)].check(type)) {\n\t\t\treturn PARSERS[/** @type {keyof typeof PARSERS} */ (key)]\n\t\t}\n\t}\n\treturn null\n}\n\n/**\n * @template T\n *\n * @param {string} strVal\n * @param {string} type\n * @returns {T}\n */\nfunction parse(strVal, type) {\n\tconst parser = getParserByType(type)\n\tif (!parser) {\n\t\tthrow new Error(`Invalid type \"${type}\"`)\n\t}\n\treturn /** @type {T} */ (parser.parse(strVal, type))\n}\n\n/**\n * @template T\n *\n * @typedef {Object} Parser\n * @property {(strVal: string) => T} parse\n */\n\nconst commonTypes = {\n\tint: () => mappableParser(PARSERS.int),\n\n\tstr: () => mappableParser(PARSERS.str),\n\n\tvec: () => mappableParser(PARSERS.vec),\n\n\tvec3: () => mappableParser(PARSERS.vec3),\n\n\t/**\n\t * @template T\n\t *\n\t * @param {Parser<T>} type\n\t * @param {string | RegExp} [separator]\n\t */\n\tarr: (type, separator) =>\n\t\tmappableParser({\n\t\t\tparse: (strVal) => {\n\t\t\t\treturn strVal\n\t\t\t\t\t.split(separator ?? tryGetSeparator(strVal) ?? \",\")\n\t\t\t\t\t.map((x) => x.trim())\n\t\t\t\t\t.filter((x) => x !== \"\")\n\t\t\t\t\t.map((x) => type.parse(x))\n\t\t\t},\n\t\t}),\n\n\t/**\n\t * @template {Parser<unknown>[]} T\n\t *\n\t * @param {import(\"ts-toolbelt\").F.Narrow<T>} types\n\t * @param {string} [separator]\n\t */\n\ttuple: (types, separator) =>\n\t\tmappableParser({\n\t\t\t/**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {{[K in keyof T]: T[K] extends Parser<infer U> ? U : never}}\n\t\t\t */\n\t\t\tparse: (strVal) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn strVal\n\t\t\t\t\t.split(separator ?? tryGetSeparator(strVal) ?? \",\")\n\t\t\t\t\t.map((x, i) => types[i].parse(x))\n\t\t\t},\n\t\t}),\n\n\t/**\n\t * @template {readonly string[]} T\n\t *\n\t * @param {T} values\n\t */\n\tenum: (...values) =>\n\t\tmappableParser({\n\t\t\t/**\n\t\t\t * @param {string} strVal\n\t\t\t * @returns {T[number]}\n\t\t\t */\n\t\t\tparse: (strVal) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (!values.includes(strVal)) {\n\t\t\t\t\tthrow new Error(`Invalid enum value \"${strVal}\"`)\n\t\t\t\t}\n\t\t\t\treturn strVal\n\t\t\t},\n\t\t}),\n}\n\n/**\n * @template T\n * @param {Parser<T>} parser\n */\nfunction mappableParser(parser) {\n\treturn {\n\t\t...parser,\n\t\t/**\n\t\t * @template U\n\t\t * @param {(val: T) => U} fn\n\t\t */\n\t\tmap: (fn) => mappableParser({ ...parser, parse: (x) => fn(parser.parse(x)) }),\n\t}\n}\n\n/**\n * @template {(string)[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param {T} keys\n */\nfunction tpl(strings, ...keys) {\n\t/**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as import(\"./types.js\").TemplateKey<P>]: import(\"./types.js\").TemplateValue<P> }}\n\t */\n\tfunction parseInternal(input) {\n\t\t/** @type {Record<string, any>} */\n\t\tconst model = {}\n\t\tlet lastIndex = 0\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst start = strings[i].length + lastIndex\n\t\t\tconst end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length\n\t\t\tconst strVal = input.slice(start, end)\n\t\t\tconst [key, type] = keys[i].split(\"|\")\n\t\t\tmodel[key] = parse(strVal, type)\n\t\t\tlastIndex = end\n\t\t}\n\t\treturn /** @type {any} */ (model)\n\t}\n\n\treturn mappableParser({ parse: parseInternal })\n}\n\n/**\n * @template {string} K\n * @template T\n *\n * @param {K} name\n * @param {Parser<T>} parser\n * @returns {NamedParser<K, T>}\n */\nfunction named(name, parser) {\n\treturn {\n\t\t...parser,\n\t\tname,\n\t}\n}\n\n/**\n * @template {string} K\n * @template T\n *\n * @typedef {object} NamedParser\n *\n * @property {(strVal: string) => T} parse\n * @property {K} name\n */\n\n/**\n * @template {NamedParser<any, any>[]} T\n *\n * @param {TemplateStringsArray} strings\n * @param  {T} keys\n */\nfunction tpl2(strings, ...keys) {\n\t/**\n\t * @param {string} input\n\t * @returns {{[P in T[number] as P['name']]: ReturnType<P['parse']> }}\n\t */\n\tfunction parseInternal(input) {\n\t\t/** @type {Record<string, any>} */\n\t\tconst model = {}\n\t\tlet lastIndex = 0\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst start = strings[i].length + lastIndex\n\t\t\tconst end = strings[i + 1] ? input.indexOf(strings[i + 1], start) : input.length\n\t\t\tconst strVal = input.slice(start, end)\n\t\t\tconst namedParser = keys[i]\n\t\t\tmodel[namedParser.name] = namedParser.parse(strVal)\n\t\t\tlastIndex = end\n\t\t}\n\t\treturn /** @type {any} */ (model)\n\t}\n\n\treturn mappableParser({ parse: parseInternal })\n}\n\nexport const t = {\n\t...commonTypes,\n\tnamed,\n\ttpl,\n\ttpl2,\n}\n","// @ts-check\nimport \"../../../js/modules/iterator-extensions.js\"\nimport { parseInput, moves, widenMap } from \"../../../js/solutions/15.js\"\nimport { V } from \"../../../js/modules/index.js\"\nimport { scaleCanvasToPixelRatio } from \"../common.js\"\n\nconst canvas = document.getElementById(\"canvas\")\nif (!(canvas instanceof HTMLCanvasElement)) throw new Error(\"no canvas\")\n\nconst ctx = canvas.getContext(\"2d\")\nif (!ctx) throw new Error(\"no ctx\")\n\nconst INIT_WIDTH = 300\nconst INIT_HEIGHT = 300\nconst INIT_SCALE = 1\n\nscaleCanvasToPixelRatio(ctx, INIT_WIDTH * INIT_SCALE, INIT_HEIGHT * INIT_SCALE)\n\nconst colors = {\n\tgreen: \"#91cfa1\",\n\tred: \"#ea859a\",\n\tyellow: \"#fef59d\",\n\ttext: '#fee15b'\n}\n\nlet raf = 0\nlet unsubscribe = () => {}\n/**\n * @param {string} input\n * @param {CanvasRenderingContext2D} ctx\n * @param {boolean} part2\n */\nfunction draw(input, ctx, part2) {\n\tcancelAnimationFrame(raf)\n\tunsubscribe()\n\tlet [map, arrows] = parseInput(input)\n\n\tlet width = window.innerWidth / 2 - 32\n\tlet height = width\n\n\tif (part2) {\n\t\tmap = widenMap(map)\n\t\twidth *= 2\n\t}\n\n\tconst mapWidth = map[0].length\n\tconst scale = width / mapWidth\n\n\tscaleCanvasToPixelRatio(ctx, width, height)\n\n\tctx.canvas.scrollIntoView({ behavior: \"smooth\" })\n\n\tconst drawMap = (/** @type {string[][]} */ map, /** @type {V.Vec2} */ robot) => {\n\t\tctx.clearRect(0, 0, width, height)\n\t\tctx.font = `${scale}px monospace`\n\t\tmap.forEach((row, y) => {\n\t\t\trow.forEach((cell, x) => {\n\t\t\t\tctx.fillStyle = 'white'\n\t\t\t\tctx.fillRect(x * scale, y * scale, scale, scale)\n\t\t\t\t\n\t\t\t\tconst padding = scale * 0.05\n\t\t\t\t\n\t\t\t\t// draw floor tile\n\t\t\t\tctx.fillStyle = colors.yellow\n\t\t\t\tctx.fillRect(\n\t\t\t\t\tx * scale + padding,\n\t\t\t\t\ty * scale + padding,\n\t\t\t\t\tscale - padding * 2,\n\t\t\t\t\tscale - padding * 2,\n\t\t\t\t)\n\n\t\t\t\tctx.font = `${scale}px monospace`\n\t\t\t\tctx.textAlign = \"center\"\n\t\t\t\tctx.textBaseline = \"top\"\n\n\t\t\t\tif (V.eq(V.vec(x, y), robot)) {\n\t\t\t\t\t// draw robot emoji\n\t\t\t\t\tctx.fillStyle = colors.text\n\t\t\t\t\tctx.fillText(\"🤖\", x * scale + scale / 2, y * scale)\n\t\t\t\t}\n\n\t\t\t\tif (cell === \"#\") {\n\t\t\t\t\t// draw wall\n\t\t\t\t\tctx.fillStyle = colors.red\n\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\tx * scale + padding,\n\t\t\t\t\t\ty * scale + padding,\n\t\t\t\t\t\tscale - padding * 2,\n\t\t\t\t\t\tscale - padding * 2,\n\t\t\t\t\t)\n\t\t\t\t\tctx.fillStyle = colors.text\n\t\t\t\t\tctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2)\n\t\t\t\t}\n\n\t\t\t\tif (cell === \"O\") {\n\t\t\t\t\t// draw box on the floor\n\t\t\t\t\tctx.fillStyle = colors.green\n\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\tx * scale + padding,\n\t\t\t\t\t\ty * scale + padding,\n\t\t\t\t\t\tscale - padding * 2,\n\t\t\t\t\t\tscale - padding * 2,\n\t\t\t\t\t)\n\t\t\t\t\tctx.fillStyle = colors.text\n\t\t\t\t\tctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2)\n\t\t\t\t}\n\n\t\t\t\tif (cell === \"[\") {\n\t\t\t\t\t// draw box on the floor\n\t\t\t\t\tctx.fillStyle = colors.green\n\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\tx * scale + padding,\n\t\t\t\t\t\ty * scale + padding,\n\t\t\t\t\t\tscale - padding,\n\t\t\t\t\t\tscale - padding * 2,\n\t\t\t\t\t)\n\t\t\t\t\tctx.fillStyle = colors.text\n\t\t\t\t\tctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2)\n\t\t\t\t}\n\n\t\t\t\tif (cell === \"]\") {\n\t\t\t\t\t// draw box on the floor\n\t\t\t\t\tctx.fillStyle = colors.green\n\t\t\t\t\tctx.fillRect(x * scale, y * scale + padding, scale - padding, scale - padding * 2)\n\t\t\t\t\tctx.fillStyle = colors.text\n\t\t\t\t\tctx.fillText(cell, x * scale + scale / 2, y * scale + padding * 2)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tconst iter = moves(map, arrows)\n\n\tlet lastDt = 0\n\traf = requestAnimationFrame(function render(dt) {\n\t\tif (dt - lastDt > 30) {\n\t\t\tlastDt = dt\n\t\t\tconst { value, done } = iter.next()\n\t\t\tif (done) {\n\t\t\t\tunsubscribe()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst [robot, map] = value\n\t\t\tdrawMap(map, robot)\n\t\t}\n\n\t\traf = requestAnimationFrame(render)\n\t})\n}\n\nconst inputForm = document.getElementById(\"input-form\")\nif (!(inputForm instanceof HTMLFormElement)) throw new Error(\"no form\")\n\ninputForm.addEventListener(\"submit\", function (e) {\n\te.preventDefault()\n\tconst formData = new FormData(this)\n\tconst input = formData.get(\"input\")?.toString() ?? \"\"\n\n\tdraw(input.trim(), ctx, formData.get(\"part2\")?.toString() === \"on\")\n})\n\n// @ts-ignore\ninputForm.querySelector(\"#input\").textContent = `\\\n##########\n#..O..O.O#\n#......O.#\n#.OO..O.O#\n#..O@..O.#\n#O#..O...#\n#O..O..O.#\n#.OO.O.OO#\n#....O...#\n##########\n\n<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^\nvvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v\n><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<\n<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^\n^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><\n^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^\n>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^\n<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>\n^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>\nv^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`\n","// @ts-check\n\nimport { bfs, dijkstra } from \"../modules/graph.js\"\nimport { Array2d, V } from \"../modules/index.js\"\nimport { tuple } from \"../modules/lib.js\"\nimport { t } from \"../modules/parser.js\"\n\nexport const useExample = false\n\nexport const exampleInput = `\\\n##########\n#..O..O.O#\n#......O.#\n#.OO..O.O#\n#..O@..O.#\n#O#..O...#\n#O..O..O.#\n#.OO.O.OO#\n#....O...#\n##########\n\n<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^\nvvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v\n><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<\n<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^\n^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><\n^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^\n>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^\n<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>\n^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>\nv^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`\n\n/** @typedef {ReturnType<typeof parseInput>} InputType */\n\nexport const parseInput = t.tuple([\n\tArray2d,\n\tt\n\t\t.str()\n\t\t.map((l) => l.replaceAll(\"\\n\", \"\"))\n\t\t.map((l) => l.split(\"\").map(V.asArrow)),\n]).parse\n\nconst isBox = (/** @type {string} */ c) => c === \"O\" || c === \"[\" || c === \"]\"\n\nconst getBoxPositions = (/** @type {string[][]} */ map, /** @type {V.Vec2} */ pos) =>\n\tArray2d.get(map, pos) === \"[\"\n\t\t? [pos, V.add(pos, V.DIR_TO_VEC.R)] // []\n\t\t: Array2d.get(map, pos) === \"]\"\n\t\t? [V.add(pos, V.DIR_TO_VEC.L), pos] // []\n\t\t: [pos] // O\n\nconst canMove = (\n\t/** @type {string[][]} */ map,\n\t/** @type {V.Vec2} */ pos,\n\t/** @type {V.Vec2} */ dir,\n) => Array2d.get(map, V.add(pos, dir)) !== \"#\"\n\n/**\n * @param {string[][]} map\n * @param {V.Vec2} pos\n * @param {V.Arrow} arrow\n */\nfunction makeMove(map, pos, arrow) {\n\tconst dir = V.fromArrow(arrow)\n\tconst targetPos = V.add(pos, dir)\n\n\tif (Array2d.get(map, targetPos) === \"#\") {\n\t\treturn pos\n\t}\n\n\tif (Array2d.get(map, targetPos) === \".\") {\n\t\treturn targetPos\n\t}\n\n\t// targetPos is a box\n\tconst allBoxes = dijkstra(\n\t\t(pos) => getBoxPositions(map, V.add(pos, dir)).filter((x) => isBox(Array2d.get(map, x))),\n\t\t(pos) => V.mLen(pos, targetPos),\n\t\tgetBoxPositions(map, targetPos),\n\t\tV.toString,\n\t)\n\t\t.map((x) => x.value)\n\t\t.toArray()\n\t\t.reverse()\n\n\tif (allBoxes.some((box) => !canMove(map, box, dir))) return pos\n\n\tfor (const box of allBoxes) {\n\t\tArray2d.set(map, V.add(box, dir), Array2d.get(map, box))\n\t\tArray2d.set(map, box, \".\")\n\t}\n\n\treturn targetPos\n}\n\n/**\n *\n * @param {string[][]} map\n * @param {V.Arrow[]} arrows\n */\nexport function* moves(map, arrows) {\n\tconst start = Array2d.traverse(map).find((p) => p.value === \"@\").pos\n\tArray2d.set(map, start, \".\")\n\n\tlet cur = start\n\tyield tuple(cur, map, \"start\")\n\n\tfor (const arrow of arrows) {\n\t\tcur = makeMove(map, cur, arrow)\n\t\tyield tuple(cur, map, arrow)\n\t}\n}\n\n/**\n * @param {InputType} input\n */\nexport function part1(input) {\n\tconst [map, arrows] = input\n\n\tconst lst = moves(map, arrows).last()\n\n\treturn Array2d.traverse(lst[1])\n\t\t.filter((p) => p.value === \"O\")\n\t\t.map((p) => V.y(p.pos) * 100 + V.x(p.pos))\n\t\t.sum()\n}\n\n/**\n * @param {string[][]} map\n */\nexport function widenMap(map) {\n\treturn map.map((row) =>\n\t\trow.flatMap((cell) => {\n\t\t\treturn cell === \"#\" ? [\"#\", \"#\"] : cell === \"O\" ? [\"[\", \"]\"] : [cell, \".\"]\n\t\t}),\n\t)\n}\n\n/**\n * @param {InputType} input\n */\nexport function part2(input) {\n\tconst [map, arrows] = input\n\tconst wideMap = widenMap(map)\n\n\tconst lst = moves(wideMap, arrows).last()\n\n\treturn Array2d.traverse(lst[1])\n\t\t.filter((p) => p.value === \"[\")\n\t\t.map((p) => V.y(p.pos) * 100 + V.x(p.pos))\n\t\t.sum()\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$1f570fa1186bcdbc$export$625550452a3fa3ec","set","s","enumerable","configurable","$iHpWs","$1f570fa1186bcdbc$var$tryGetSeparator","strVal","separator","includes","$1f570fa1186bcdbc$var$PARSERS","int","name","check","key","parse","parseInt","str","vec","x","y","split","map","Number","V","vec3","z","V3","arr","endsWith","type","slice","parser","$1f570fa1186bcdbc$var$getParserByType","filter","trim","tuple","startsWith","types","i","$1f570fa1186bcdbc$var$mappableParser","fn","enum","values","named","tpl","strings","keys","input","model","lastIndex","length","start","end","indexOf","$1f570fa1186bcdbc$var$parse","tpl2","namedParser","$d81pG","$k3N1b","$2GOZM","$97d31368c6682dce$export$20bebb8aee8dd3f5","t","Array2d","l","replaceAll","asArrow","$97d31368c6682dce$var$isBox","c","$97d31368c6682dce$var$getBoxPositions","pos","add","DIR_TO_VEC","R","L","$97d31368c6682dce$var$canMove","dir","$7zFg5","$e05c23bb78ca56be$var$canvas","document","getElementById","HTMLCanvasElement","$e05c23bb78ca56be$var$ctx","getContext","scaleCanvasToPixelRatio","$e05c23bb78ca56be$var$INIT_WIDTH","$e05c23bb78ca56be$var$INIT_HEIGHT","$e05c23bb78ca56be$var$colors","green","red","yellow","text","$e05c23bb78ca56be$var$raf","$e05c23bb78ca56be$var$unsubscribe","$e05c23bb78ca56be$var$inputForm","HTMLFormElement","addEventListener","e","preventDefault","formData","FormData","$e05c23bb78ca56be$var$draw","ctx","part2","cancelAnimationFrame","arrows","width","window","innerWidth","height","row","flatMap","cell","mapWidth","scale","canvas","scrollIntoView","behavior","drawMap","robot","clearRect","font","forEach","fillStyle","fillRect","padding","textAlign","textBaseline","eq","fillText","iter","traverse","find","p","value","cur","arrow","$97d31368c6682dce$var$makeMove","fromArrow","targetPos","allBoxes","dijkstra","mLen","toString","toArray","reverse","some","box","lastDt","requestAnimationFrame","render","dt","done","next","querySelector","textContent"],"version":3,"file":"index.acde3242.js.map"}